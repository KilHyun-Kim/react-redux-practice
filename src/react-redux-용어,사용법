용어 / 준비물

1. 액션

상태에 어떠한 변화가 필요하면 액션이라는 것이발생함
이는 하나의 객체로 표현됨

{
    type: 'TOGGLE_VALUE'
}

액션 객체는 type 필드를 반드시 가지고 있어야함.
이 값을 액션의 이름이라고 생각하면 됨
그 외의 값들은 나중에 상태 업데이트를 할 때 참고해야 할 값.
{
    type: 'ADD_TODO'
    data: {
        id: 1,
        text: '리덕스 배우기'
    }
}

2. 액션 생성 함수

액션 객체를 만들어주는 함수

어떤 변화를 일으켜야 할 때마다, 액션 객체를 만들어야 하는데, 
매번 액션 객체를 직접 작성하기 번거로울 수 있다.
만드는 과정에서 실수로 정보를 놓칠 수도 있다.
이러한 일을 방지하기 위해 함수로 만들어서 관리함

const changeInput = text => ({
    type: 'CHANGE_INPUT',
    text
})

요론느낌


3. 리듀서

reducer ? 변화를 일으키는 함수 , 액션을 만들어서 발생시키면 리듀서가 현재 상태와 전달받은 액션 객체를 파라미터로 받아 온다.
그리고 두 값을 참고하여 새로운 상태를 만들어서 반환해준다

-- 리듀서 코드 --

const initialState = {
    counter : 1
};

function reducer(state= initialState, action){
    swtich(action.type){
        case INCREMENT:
        return{
            counter: state.counter + 1
        };
        case DECREMENT:
        return{
            counter: state.counter - 1
        };
        default :
        return state;
    }
}

4. 스토어

스토어란?

프로젝트에 리덕스를 적용하기 위해 스토어를 만든다.
한 개의 프로젝트는 단 하나의 스토어만 가질 수 있다.
스토어 안에는 현재 애플리케이션 상태와 리듀서가 들어가 있으며, 그 외에도 몇 가지 중요한 내장 함수를 지닌다.


5. 디스패치

dispatch ? 디스패치 ?
스토어의 내장 함수 중 하나이다.
디스패치는 '액션을 발생 시키는 것' 이라고 이해
이 함수는 dispatch(action)과 같은 형태로 액션 객체를 파라미터로 ㅁ넣어서 호출함.

이 함수가 호출되면 스토어는 리듀서 함수를 실행시켜서 새로운 상태를 만들어 준다.


6. 구독

subscribe도 스토어의 내장 함수 중 하나.
subscribe 함수 안에 리스너 함수를 파라미터로 넣어서 호출해 주면, 이 리스너 함수가 액션이 디스패치되어 상태가 업데이트될 때마다 호출됨

const listener = () => {
    console.log('상태가 업데이트됨');
}

const unsubscribe = store.subscribe(listener)

unsubscribe(); // 추후 구독을 비활성화 할 때 한수를 호출
???????????? 먼말이야 도대체



리덕스의 세가지 규칙

1. 단일 스토어
2. 읽기 전용 상태
3. 리듀서는 순수한 함수




UI 준비하기

redux 사용 시 가장 많이 사용하는 패턴은
프레젠테이셔널 컴포넌트(덤프컴포넌트) : 상태 관리가 이루어지지 않고,
그저 props를 받아 와서 화면에 UI를 보여 주기만 하는 컴포넌트이다.

컨테이너 컴포넌트(스말트 컴포넌트) : 리덕스와 연동되어 있는 컴포넌트
리덕스로부터 상태를 받아오기도 하고 리덕스 스토어에 액션을 디스패치함

장점: 코드의 재사용성이 높아짐, 관심사의 분리가 이루어져 UI를 작성할 때
집중 가능

=> /components/Counter.js /components/Todos.js


리덕스 관련 코드 작성하기

가장 일반적인 구조로 actions, constans, reducers라는 세 개의 디렉터리를
만들고 그 안에 기능별로 파일을 하나씩 만드는 방식이다.
장점: 코드를 종류에 따라 다른 파일에 작성하여 정리할 수 있어서 편리하지만,
단점: 새로운 액션을 만들 때마다 세 종류의 파일을 모두 수정해야 하기
때문에 불편하다.

Ducks 패턴 : 액션타입, 액션 생성함수, 리듀서 함수를 기능별로 
파일 하나에 몰아서 다 작성하는 방식
장점 : 위의 방식의 불편함 제거


순서 ) 액션 타입 정의하기 -> 액션 생성 함수 만들기 
-> 초기 상태 정의하기(initialState) -> 리듀서 함수 만들기(불변성 유지)

*프로젝트에서 리듀서가 여러 개 일경우*
*createStore 함수를 사용하여
스토어를 만들때는 리듀서를 하나만 사용해야한다.*

그렇기 때문에 기존에 만들었던 리듀서를 하나로 합쳐줘야한다.

리덕스에서 제공하는 combineReducers 유틸함수 사용하여 처리

# modules/index.js 의 식으로 설정해주면
나중에 불러올 때 디렉터리 이름까지만 입력하여 불러올 수 있다.
import rootReducer from './modules' (불러올때,)

↑ 리듀서, 기본 정의
-------------------------------------------------------------
↓ 리액트 애플리케이션에 리덕스 적용하기

스토어를 만들고 리액트 애플리케이션에 리덕스를 적용하는 작업은
src/index.js 에서 이루어짐

# src/index.js

Provider 컴포넌트 사용하여 프로젝트에 리덕스 적용하기,
- 리액트 컴포넌트에서 스토어를 사용할 수 있도록 App 컴포넌트를
react-redux에서 제공하는 Provider 컴포넌트로 감싸준다.
이 컴포넌트는 store를 props로 전달해야한다 (필수)


&Redux DevTools 는 리덕스 개발자 도구 / 크롬 확장 프로그램 
사용시
const store = createStore(
  rootReducer,
  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
);
로 사용할 수 있으나,

패키지를 설치하여 적용하면 코드가 깔끔해짐

$ yarn add redux-devtools-extension 으로 설치

import { composeWithDevTools } from "redux-devtools-extension";
const store = createStore(rootReducer, composeWithDevTools());

- store 에 두번째 인자로 composeWithDevTools를 추가하여 사용



순서)스토어 만들기, 루트 리듀서 갖고오기, 스토어 생성 -> 
Provider 컴포넌트 사용하여 프로젝트에 리덕스 적용하기 ->
Redux DevTools설치, 적용


--------------------------------------------------------
↓ 컨테이너 컴포넌트 만들기

컴포넌트에서 리덕스 스토어에 접근하여 원하는 상태를 받아 오고,
또 액션도 디스패치해 줄 차례이다.

CounterContainer 만들기
/containers/CounterContainer 컴포넌트를 리덕스와 연동하려면
react-redux 에서 제공하는 connect 함수를 사용해야함

*connect(mapStateToProps, mapDispatchToProps)(연동할 컴포넌트)

*mapStateToProps : 리덕스 스토어 안의 상태를 컴포넌트의 props로 
넘겨주기 위해 설정하는 함수,
*mapDispatchToProps : 액션 생성 함수를 컴포넌트의 props로 
넘겨주기 위해 사용하는 함수

connect 함수를 호출하고 나면 또 다른 함수를 반환함
반환된 함수에 컴포넌트를 파라미터로 넣어 주면 리덕스와 연동된
컴포넌트가 만들어짐


mapStateToProps와 mapDispatchToProps에서 반환하는 객체 내부의 값들은
컴포넌트의 props로 전달된다.

mapStateToProps는 state를 파라미터로 받아오며,
이 값은 현재 스토어가 지니고 있는 상태를 가리킨다.

mapDispatchToProps의 경우 store의 
내장 함수 dispatch를 파라미터로 받아온다.

mapDispatchToProps 의 경우
 프레젠테이셔널 컴포넌트에 dispatch를 props로 전달하고,
mapStateToProps 의 경우
 프레젠테이셔널 컴포는트에 state값을 props로 전달한다


*액션 생성 함수를 불러와서 액션 객체를 만들고 디스패치 해준다

------------------------------------------------------------

& connect 함수 사용

1. mapStateToProps, mapDispatchToProps를 미리 선언해놓고 사용하기

# /containers/CounterContainer.js
const mapStateToProps = (state) => ({
  number: state.counter.number,
});

const mapDispatchToProps = (dispatch) => ({
  increase: () => {
    // 액션생성함수 사용
    dispatch(increase());
  },
  decrease: () => {
    dispatch(decrease());
  },
});

export default connect(mapStateToProps, mapDispatchToProps)(CounterContainer);

2. connect 함수 내부에 익명 함수 형태로 선언하기

export default connect(
  (state) => ({
    number: state.counter.number,
  }),
  (dispatch) => ({
    increase: () => dispatch(increase()),
    decrease: () => dispatch(decrease()),
  })
)(CounterContainer);

- 코드가 더 깔끔해질 수 있다, ( 취향에 따라 )
- 액션을 디스패치하기 위해 각 액션 생성 함수를 호출하고 dispatch로 
감싸는 작업이 번거롭다.

3. bindActionCreatores 유틸 함수 사용
    
export default connect(
  (state) => ({
    number: state.counter.number,
  }),
  (dispatch) =>
    bindActionCreators(
      {
        increase,
        decrease,
      },
      dispatch
    )
)(CounterContainer);


4. mapDispatchToProps에 해당하는 파라미터를 
함수형태가 아닌 액션 생성 함수로 이루어진 객체 형태로 넣어 주기
( bindActionCreatores를 사용하지않고 ,)

export default connect(
  (state) => ({
    number: state.counter.number,
  }),
  {
    increase,
    decrease,
  }
)(CounterContainer);

******** 4번이 제일 간단함 *******


Retry - Todos

